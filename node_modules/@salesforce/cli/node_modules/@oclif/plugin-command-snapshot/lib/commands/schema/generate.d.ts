import { Schema } from 'ts-json-schema-generator';
import SnapshotCommand from '../../snapshot-command.js';
export type SchemasMap = {
    [key: string]: Schema;
};
export type Schemas = {
    commands: SchemasMap;
    hooks: SchemasMap;
};
export type GenerateResponse = string[];
type SchemaGenerateOptions = {
    base: SnapshotCommand;
    commandGlobs?: string[];
    commandsDir?: string;
    ignoreVoid?: boolean;
};
export declare class SchemaGenerator {
    private base;
    private classToId;
    private commandGlobs;
    private commandsDir;
    private ignoreVoid;
    constructor(options: SchemaGenerateOptions);
    generate(): Promise<Schemas>;
    private determineCommandId;
    private generateSchema;
    private getAllCmdFiles;
    private getAllHookFiles;
    private getDirs;
    /**
     * Use regex to find the typescript type being returned by the command's
     * `run` method.
     * @param file the file to parse
     * @returns Returns the name of the return type and the command id.
     */
    private parseCmdFile;
    /**
     * Use regex to find the typescript type being returned by the hook
     * @param file the file to parse
     * @returns Returns the name of the return type and the hook id.
     */
    private parseHookFile;
    private validateReturnType;
}
export default class SchemaGenerate extends SnapshotCommand {
    static flags: {
        filepath: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        ignorevoid: import("@oclif/core/interfaces").BooleanFlag<boolean>;
        singlefile: import("@oclif/core/interfaces").BooleanFlag<boolean>;
    };
    run(): Promise<GenerateResponse>;
}
export {};
