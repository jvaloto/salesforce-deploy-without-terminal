import SnapshotCommand, { SnapshotEntry } from '../../snapshot-command.js';
interface Change {
    added?: boolean;
    name: string;
    removed?: boolean;
}
type CommandChange = {
    alias: Change[];
    chars: Change[];
    flags: Change[];
    plugin: string;
} & Change;
export type CompareResponse = {
    addedCommands?: string[];
    diffCommands?: CommandChange[];
    removedCommands?: string[];
    removedFlags?: string[];
};
export default class Compare extends SnapshotCommand {
    static flags: {
        filepath: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
    };
    get changed(): CommandChange[];
    /**
     * Compare a snapshot with the current commands
     * @param {CommandChange[]} initialCommands Command list from the snapshot
     * @param {CommandChange[]} updatedCommands Command list from runtime
     * @returns all the command differences
     */
    compareSnapshot(initialCommands: SnapshotEntry[], updatedCommands: CommandChange[]): Promise<CompareResponse>;
    /**
     * compares two command's properties to each other
     * @return a list of added, removed, updated, and changed properties
     * @param initial initial command property to compare against
     * @param updated generated command property to compare with
     */
    diffCommandProperty(initial: string[], updated: Change[]): {
        addedProperty: string[];
        changedProperty: Change[];
        removedProperty: string[];
        updated: Change[];
    };
    run(): Promise<CompareResponse>;
}
export {};
