"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTapDiagnostics = void 0;
const os = __importStar(require("node:os"));
/**
 * this regex is flagged as likely incorrect by Cursor, BUT there is a unit test that specs
 * expect(result[12].diagnostics).to.eql([
      'Weird characters <>&"\'',
      'Surrounded by newlines.',
      'and whitespace.'
    ]);
    so it has been left as is
 */
const startsWithNewlineRegex = new RegExp(/^[/\r\n|\r|\n][\w]*/gim);
const buildTapDiagnostics = (testResult) => {
    if (testResult.outcome === "Pass" /* ApexTestResultOutcome.Pass */) {
        return [];
    }
    const message = testResult.message
        ? startsWithNewlineRegex.test(testResult.message)
            ? testResult.message
                .split(/\r\n|\r|\n/g)
                .filter((msg) => msg?.length > 0)
                .map((msg) => msg.trim())
            : [testResult.message]
        : ['Unknown error'];
    const stack = testResult.stackTrace
        ? testResult.stackTrace.split(os.EOL)
        : [];
    return [...message, ...stack];
};
exports.buildTapDiagnostics = buildTapDiagnostics;
//# sourceMappingURL=buildTapDiagnostics.js.map