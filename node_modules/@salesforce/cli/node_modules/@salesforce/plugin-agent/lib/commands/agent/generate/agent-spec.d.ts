import { SfCommand } from '@salesforce/sf-plugins-core';
import { AgentJobSpec, AgentTone } from '@salesforce/agents';
export type AgentCreateSpecResult = {
    isSuccess: boolean;
    errorMessage?: string;
    specPath?: string;
} & AgentJobSpec;
export type AgentSpecFileContents = AgentJobSpec & {
    agentUser?: string;
    enrichLogs?: boolean;
    tone?: AgentTone;
    primaryLanguage?: 'en_US';
};
export declare const FLAGGABLE_PROMPTS: {
    type: {
        message: string;
        promptMessage: string;
        validate: (d: string) => boolean | string;
        options: string[];
        required: true;
    };
    role: {
        message: string;
        validate: (d: string) => boolean | string;
        required: true;
    };
    'company-name': {
        message: string;
        validate: (d: string) => boolean | string;
        required: true;
    };
    'company-description': {
        message: string;
        validate: (d: string) => boolean | string;
        required: true;
    };
    'company-website': {
        message: string;
        validate: (d: string) => boolean | string;
    };
    'max-topics': {
        message: string;
        promptMessage: string;
        validate: (d: string) => boolean | string;
        default: string;
    };
    'agent-user': {
        message: string;
        promptMessage: string;
        validate: () => boolean | string;
    };
    'enrich-logs': {
        message: string;
        promptMessage: string;
        validate: () => boolean | string;
        options: string[];
        default: string;
    };
    tone: {
        message: string;
        promptMessage: string;
        validate: () => boolean | string;
        options: string[];
        default: string;
    };
};
export default class AgentCreateSpec extends SfCommand<AgentCreateSpecResult> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly requiresProject = true;
    static readonly flags: {
        spec: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        'output-file': import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        'full-interview': import("@oclif/core/interfaces").BooleanFlag<boolean>;
        'prompt-template': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        'grounding-context': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        'force-overwrite': import("@oclif/core/interfaces").BooleanFlag<boolean>;
        type: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        role: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        "company-name": import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        "company-description": import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        "company-website": import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        "max-topics": import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        "agent-user": import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        "enrich-logs": import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        tone: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        'target-org': import("@oclif/core/interfaces").OptionFlag<import("@salesforce/core").Org, import("@oclif/core/interfaces").CustomOptions>;
        'api-version': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
    };
    run(): Promise<AgentCreateSpecResult>;
}
