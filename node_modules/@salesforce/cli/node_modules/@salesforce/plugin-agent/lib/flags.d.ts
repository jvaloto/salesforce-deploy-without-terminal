import { Interfaces } from '@oclif/core';
import { Connection } from '@salesforce/core';
import { AgentTestResultsResponse } from '@salesforce/agents';
import { AgentTestResultsResult } from './commands/agent/test/results.js';
export type AgentTestRunResult = (Partial<AgentTestResultsResponse> & {
    status: 'NEW' | 'IN_PROGRESS' | 'ERROR' | 'TERMINATED';
    runId: string;
}) | (AgentTestResultsResult & {
    status: 'COMPLETED';
    runId: string;
});
export type FlaggablePrompt = {
    message: string;
    options?: readonly string[] | string[];
    validate: (d: string) => boolean | string;
    char?: Interfaces.AlphabetLowercase | Interfaces.AlphabetUppercase;
    required?: boolean;
    default?: string | boolean;
    promptMessage?: string;
};
type FlagsOfPrompts<T extends Record<string, FlaggablePrompt>> = Record<keyof T, Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>>;
type AgentTone = 'casual' | 'formal' | 'neutral';
export declare const resultFormatFlag: Interfaces.FlagDefinition<"json" | "human" | "junit" | "tap", Interfaces.CustomOptions, {
    multiple: false;
    requiredOrDefaulted: true;
}>;
export declare const testOutputDirFlag: Interfaces.FlagDefinition<string, Interfaces.CustomOptions, {
    multiple: false;
    requiredOrDefaulted: false;
}>;
export declare function makeFlags<T extends Record<string, FlaggablePrompt>>(flaggablePrompts: T): FlagsOfPrompts<T>;
export declare function traverseForFiles(dir: string, suffixes: string[], excludeDirs?: string[]): Promise<string[]>;
export declare const promptForAiEvaluationDefinitionApiName: (flagDef: FlaggablePrompt, connection: Connection) => Promise<string>;
export declare const promptForYamlFile: (flagDef: FlaggablePrompt) => Promise<string>;
export declare const promptForFlag: (flagDef: FlaggablePrompt) => Promise<string>;
export declare const validateAgentType: (agentType?: string, required?: boolean) => string | undefined;
export declare const validateMaxTopics: (maxTopics?: number) => number | undefined;
export declare const validateTone: (tone: AgentTone) => AgentTone;
export declare const validateAgentUser: (connection: Connection, agentUser?: string) => Promise<void>;
export declare const getAgentUserId: (connection: Connection, agentUser: string) => Promise<string>;
export {};
