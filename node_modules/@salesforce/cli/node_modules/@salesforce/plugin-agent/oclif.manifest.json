{
  "commands": {
    "agent:create": {
      "aliases": [],
      "args": {},
      "description": "To run this command, you must have an agent spec file, which is a YAML file that define the agent properties and contains a list of AI-generated topics. Topics define the range of jobs the agent can handle. Use the \"agent generate agent-spec\" CLI command to generate an agent spec file. Then specify the file to this command using the --spec flag, along with the name (label) of the new agent with the --name flag. If you don't specify any of the required flags, the command prompts you.\n\nWhen this command completes, your org contains the new agent, which you can then edit and customize in the Agent Builder UI. The new agent's topics are the same as the ones listed in the agent spec file. The agent might also have some AI-generated actions, or you can add them. This command also retrieves all the metadata files associated with the new agent to your local Salesforce DX project.\n\nUse the --preview flag to review what the agent looks like without actually saving it in your org. When previewing, the command creates a JSON file in the current directory with all the agent details. The name of the JSON file is the agent's API name and a timestamp.\n\nTo open the new agent in your org's Agent Builder UI, run this command: \"sf org open agent --api-name <api-name>\".",
      "examples": [
        "Create an agent by being prompted for the required information, such as the agent spec file and agent name, and then create it in your default org:\n<%= config.bin %> <%= command.id %>",
        "Create an agent by specifying the agent name, API name, and spec file with flags; use the org with alias \"my-org\"; the command fails if the API name is already being used in your org:\n<%= config.bin %> <%= command.id %> --name \"Resort Manager\" --api-name Resort_Manager --spec specs/resortManagerAgent.yaml --target-org my-org",
        "Preview the creation of an agent named \"Resort Manager\" and use your default org:\n<%= config.bin %> <%= command.id %> --name \"Resort Manager\" --spec specs/resortManagerAgent.yaml --preview"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "name": {
          "name": "name",
          "summary": "Name (label) of the new agent.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "api-name": {
          "name": "api-name",
          "summary": "API name of the new agent; if not specified, the API name is derived from the agent name (label); the API name must not exist in the org.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "spec": {
          "name": "spec",
          "summary": "Path to an agent spec file.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "preview": {
          "name": "preview",
          "summary": "Preview the agent without saving it in your org.",
          "allowNo": false,
          "type": "boolean"
        },
        "planner-id": {
          "hidden": true,
          "name": "planner-id",
          "summary": "An existing GenAiPlannerBundle ID to associate with the agent.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:create",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Create an agent in your org using a local agent spec file.",
      "enableJsonFlag": true,
      "requiresProject": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "create.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:create",
        "create:agent"
      ]
    },
    "agent:preview": {
      "aliases": [],
      "args": {},
      "description": "Use this command to have a natural language conversation with an active agent in your org, as if you were an actual user. The interface is simple: in the \"Start typing...\" prompt, enter a statement, question, or command; when you're done, enter Return. Your utterance is posted on the right along with a timestamp. The agent then responds on the left. To exit the conversation, hit ESC or Control+C.\n\nThis command is useful to test if the agent responds to your utterances as you expect. For example, you can test that the agent uses a particular topic when asked a question, and then whether it invokes the correct action associated with that topic. This command is the CLI-equivalent of the Conversation Preview panel in your org's Agent Builder UI.\n\nWhen the session concludes, the command asks if you want to save the API responses and chat transcripts. By default, the files are saved to the \"./temp/agent-preview\" directory. Specify a new default directory by setting the environment variable \"SF_AGENT_PREVIEW_OUTPUT_DIR\" to the directory. Or you can pass the directory to the --output-dir flag.\n\nFind the agent's API name in its main details page in your org's Agent page in Setup.\n\nBefore you use this command, you must complete these steps:\n\n1. Using your org's Setup UI, create a connected app in your org as described in the \"Create a Connected App\" section here: https://developer.salesforce.com/docs/einstein/genai/guide/agent-api-get-started.html#create-a-connected-app. Do these additional steps:\n\n   a. When specifying the connected app's Callback URL, add this second callback URL on a new line: \"http://localhost:1717/OauthRedirect\".\n\n   b. When adding the scopes to the connected app, add \"Manage user data via Web browsers (web)\".\n\n2. Add the connected app to your agent as described in the \"Add Connected App to Agent\" section here: https://developer.salesforce.com/docs/einstein/genai/guide/agent-api-get-started.html#add-connected-app-to-agent.\n\n3. Copy the consumer key from your connected app as described in the \"Obtain Credentials\" section here: https://developer.salesforce.com/docs/einstein/genai/guide/agent-api-get-started.html#obtain-credentials.\n\n4. If you haven't already, run the \"org login web\" CLI command as usual to authorize the development org that contains the agent you want to preview.\n\n5. Re-run the \"org web login\" command to link the new connected app to your already-authenticated user. Use the --client-app flag to give the link a name; you can specify any string, but make a note of it because you'll need it later. Use --username to specify the username that you used to log into the org in the previous step. Use --client-id to specify the consumer key you previously copied. Finally, use --scopes as indicated to specify the required API scopes. Here's an example:\n\nsf org login web --client-app agent-app --username <username> --client-id <consumer-key> --scopes \"sfap_api chatbot_api refresh_token api web\"\n\nIMPORTANT: You must use the \"--client-id <CONNECTED-APP-CONSUMER-KEY>\" flag of \"org login web\", where CONNECTED-APP-CONSUMER-KEY is the consumer key you previously copied. This step ensures that the \"org login web\" command uses your custom connected app, and not the default CLI connected app.\n\n6. Press Enter to skip sharing the client secret, then log in with your org username as usual and click Accept.\n\n7. Run this command (\"agent preview\") to interact with an agent by using the --target-org flag to specify the org username or alias as usual and --client-app to specify the linked connected app (\"agent-app\" in the previous example). Use the \"org display\" command to get the list of client apps associated with an org.",
      "examples": [
        "Interact with an agent with API name \"Resort_Manager\" in the org with alias \"my-org\" and the linked \"agent-app\" connected app:\n<%= config.bin %> <%= command.id %> --api-name \"Resort_Manager\" --target-org my-org --client-app agent-app",
        "Same as the preceding example, but this time save the conversation transcripts to the \"./transcripts/my-preview\" directory rather than the default \"./temp/agent-preview\":\n<%= config.bin %> <%= command.id %> --api-name \"Resort_Manager\" --target-org my-org --client-app agent-app --output-dir \"transcripts/my-preview\""
      ],
      "flags": {
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "client-app": {
          "char": "c",
          "dependsOn": [
            "target-org"
          ],
          "name": "client-app",
          "required": true,
          "summary": "Name of the linked client app to use for the agent connection. You must have previously created this link with \"org login web --client-app\". Run \"org display\" to see the available linked client apps.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "api-name": {
          "char": "n",
          "name": "api-name",
          "summary": "API name of the agent you want to interact with.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "output-dir": {
          "char": "d",
          "name": "output-dir",
          "summary": "Directory where conversation transcripts are saved.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "apex-debug": {
          "char": "x",
          "name": "apex-debug",
          "summary": "Enable Apex debug logging during the agent preview conversation.",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:preview",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "state": "beta",
      "strict": true,
      "summary": "Interact with an active agent to preview how the agent responds to your statements, questions, and commands (utterances).",
      "enableJsonFlag": false,
      "requiresProject": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "preview.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:preview",
        "preview:agent"
      ]
    },
    "agent:generate:agent-spec": {
      "aliases": [],
      "args": {},
      "description": "The first step in creating an agent in your org with Salesforce CLI is to generate an agent spec using this command. An agent spec is a YAML-formatted file that contains information about the agent, such as its role and company description, and then an AI-generated list of topics based on this information. Topics define the range of jobs your agent can handle.\n\nUse flags, such as --role and --company-description, to provide details about your company and the role that the agent plays in your company. If you prefer, you can also be prompted for the basic information; use --full-interview to be prompted for all required and optional properties. Upon command execution, the large language model (LLM) associated with your org uses the provided information to generate a list of topics for the agent. Because the LLM uses the company and role information to generate the topics, we recommend that you provide accurate, complete, and specific details so the LLM generates the best and most relevant topics. Once generated, you can edit the spec file; for example, you can remove topics that don't apply or change a topic's description.\n\nYou can also iterate the spec generation process by using the --spec flag to pass an existing agent spec file to this command, and then using the --role, --company-description, etc, flags to refine your agent properties. Iteratively improving the description of your agent allows the LLM to generate progressively better topics.\n\nYou can also specify other agent properties, such as a custom prompt template, how to ground the prompt template to add context to the agent's prompts, the tone of the prompts, and the username of a user in the org to assign to the agent.\n\nWhen your agent spec is ready, you then create the agent in your org by running the \"agent create\" CLI command and specifying the spec with the --spec flag.",
      "examples": [
        "Generate an agent spec in the default location and use flags to specify the agent properties, such as its role and your company details; use your default org:\n<%= config.bin %> <%= command.id %> --type customer --role \"Field customer complaints and manage employee schedules.\" --company-name \"Coral Cloud Resorts\" --company-description \"Provide customers with exceptional destination activities, unforgettable experiences, and reservation services.\"",
        "Generate an agent spec by being prompted for the required agent properties and generate a maxiumum of 5 topics; write the generated file to the \"specs/resortManagerSpec.yaml\" file and use the org with alias \"my-org\":\n<%= config.bin %> <%= command.id %> --max-topics 5 --output-file specs/resortManagerAgent.yaml --target-org my-org",
        "Be prompted for all required and optional agent properties; use your default org:\n<%= config.bin %> <%= command.id %> --full-interview",
        "Specify an existing agent spec file called \"specs/resortManagerAgent.yaml\", and then overwrite it with a new version that contains newly AI-generated topics based on the updated role information passed in with the --role flag:\n<%= config.bin %> <%= command.id %> --spec specs/resortManagerAgent.yaml --output-file specs/resortManagerAgent.yaml --role \"Field customer complaints, manage employee schedules, and ensure all resort operations are running smoothly\"",
        "Specify that the conversational tone of the agent is formal and to attach the \"resortmanager@myorg.com\" username to it; be prompted for the required properties and use your default org:\n<%= config.bin %> <%= command.id %> --tone formal --agent-user resortmanager@myorg.com"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "type": {
          "name": "type",
          "summary": "Type of agent to create. Internal types are copilots used internally by your company and customer types are the agents you create for your customers.",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "customer",
            "internal"
          ],
          "type": "option"
        },
        "role": {
          "name": "role",
          "summary": "Role of the agent.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "company-name": {
          "name": "company-name",
          "summary": "Name of your company.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "company-description": {
          "name": "company-description",
          "summary": "Description of your company.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "company-website": {
          "name": "company-website",
          "summary": "Website URL of your company.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "max-topics": {
          "name": "max-topics",
          "summary": "Maximum number of topics to generate in the agent spec; default is 5.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "agent-user": {
          "name": "agent-user",
          "summary": "Username of a user in your org to assign to your agent; determines what your agent can access and do.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "enrich-logs": {
          "name": "enrich-logs",
          "summary": "Adds agent conversation data to event logs so you can view all agent session activity in one place.",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "true",
            "false"
          ],
          "type": "option"
        },
        "tone": {
          "name": "tone",
          "summary": "Conversational style of the agent, such as how it expresses your brand personality in its messages through word choice, punctuation, and sentence structure.",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "formal",
            "casual",
            "neutral"
          ],
          "type": "option"
        },
        "spec": {
          "name": "spec",
          "summary": "Agent spec file, in YAML format, to use as input to the command.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "output-file": {
          "name": "output-file",
          "summary": "Path for the generated YAML agent spec file; can be an absolute or relative path.",
          "default": "specs/agentSpec.yaml",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "full-interview": {
          "name": "full-interview",
          "summary": "Prompt for both required and optional flags.",
          "allowNo": false,
          "type": "boolean"
        },
        "prompt-template": {
          "name": "prompt-template",
          "summary": "API name of a customized prompt template to use instead of the default prompt template.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "grounding-context": {
          "dependsOn": [
            "prompt-template"
          ],
          "name": "grounding-context",
          "summary": "Context information and personalization that's added to your prompts when using a custom prompt template.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "force-overwrite": {
          "name": "force-overwrite",
          "summary": "Don't prompt the user to confirm that an existing spec file will be overwritten.",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:generate:agent-spec",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Generate an agent spec, which is a YAML file that captures what an agent can do.",
      "enableJsonFlag": true,
      "requiresProject": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "generate",
        "agent-spec.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:generate:agent-spec",
        "generate:agent:agent-spec",
        "generate:agent-spec:agent",
        "agent:agent-spec:generate",
        "agent-spec:agent:generate",
        "agent-spec:generate:agent"
      ]
    },
    "agent:generate:template": {
      "aliases": [],
      "args": {},
      "description": "At a high-level, agents are defined by the Bot, BotVersion, and GenAiPlannerBundle metadata types. The GenAiPlannerBundle type in turn defines the agent's topics and actions. This command uses the metadata files for these three types, located in your local DX project, to generate a BotTemplate file for a specific agent (Bot). You then use the BotTemplate file, along with the GenAiPlannerBundle file that references the BotTemplate, to package the template in a managed package that you can share between orgs or on AppExchange.\n\nUse the --agent-file flag to specify the relative or full pathname of the Bot metadata file, such as force-app/main/default/bots/My_Awesome_Agent/My_Awesome_Agent.bot-meta.xml. A single Bot can have multiple BotVersions, so use the --agent-version flag to specify the version. The corresponding BotVersion file must exist locally. For example, if you specify \"--agent-version 4\", then the file force-app/main/default/bots/My_Awesome_Agent/v4.botVersion-meta.xml must exist.\n\nThe new BotTemplate file is generated in the \"botTemplates\" directory in your local package directory, and has the name <Agent_API_name>_v<Version>_Template.botTemplate-meta.xml, such as force-app/main/default/botTemplates/My_Awesome_Agent_v4_Template.botTemplate-meta.xml. The command displays the full pathname of the generated files when it completes.",
      "examples": [
        "Generate an agent template from a Bot metadata file in your DX project that corresponds to the My_Awesome_Agent agent; use version 1 of the agent.\n<%= config.bin %> <%= command.id %> --agent-file force-app/main/default/bots/My_Awesome_Agent/My_Awesome_Agent.bot-meta.xml --agent-version 1"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "agent-version": {
          "name": "agent-version",
          "required": true,
          "summary": "Version of the agent (BotVersion).",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "agent-file": {
          "char": "f",
          "name": "agent-file",
          "required": true,
          "summary": "Path to an agent (Bot) metadata file.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "agent:generate:template",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Generate an agent template from an existing agent in your DX project so you can then package the template in a managed package.",
      "enableJsonFlag": true,
      "requiresProject": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "generate",
        "template.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:generate:template",
        "generate:agent:template",
        "generate:template:agent",
        "agent:template:generate",
        "template:agent:generate",
        "template:generate:agent"
      ]
    },
    "agent:generate:test-spec": {
      "aliases": [],
      "args": {},
      "description": "The first step when using Salesforce CLI to create an agent test in your org is to use this interactive command to generate a local YAML-formatted test spec file. The test spec YAML file contains information about the agent being tested, such as its API name, and then one or more test cases. This command uses the metadata components in your DX project when prompting for information, such as the agent API name; it doesn't look in your org.\n\nTo generate a specific agent test case, this command prompts you for this information; when possible, the command provides a list of options for you to choose from:\n\n- Utterance: Natural language statement, question, or command used to test the agent.\n- Expected topic: API name of the topic you expect the agent to use when responding to the utterance.\n- Expected actions: One or more API names of the expection actions the agent takes.\n- Expected outcome: Natural language description of the outcome you expect.\n\nWhen your test spec is ready, you then run the \"agent test create\" command to actually create the test in your org and synchronize the metadata with your DX project. The metadata type for an agent test is AiEvaluationDefinition.\n\nIf you have an existing AiEvaluationDefinition metadata XML file in your DX project, you can generate its equivalent YAML test spec file with the --from-definition flag.",
      "examples": [
        "Generate an agent test spec YAML file interactively:\n<%= config.bin %> <%= command.id %>",
        "Generate an agent test spec YAML file and specify a name for the new file; if the file exists, overwrite it without confirmation:\n<%= config.bin %> <%= command.id %> --output-file specs/Resort_Manager-new-version-testSpec.yaml --force-overwrite",
        "Generate an agent test spec YAML file from an existing AiEvaluationDefinition metadata XML file in your DX project:\n<%= config.bin %> <%= command.id %> --from-definition force-app//main/default/aiEvaluationDefinitions/Resort_Manager_Tests.aiEvaluationDefinition-meta.xml"
      ],
      "flags": {
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "from-definition": {
          "char": "d",
          "name": "from-definition",
          "summary": "Filepath to the AIEvaluationDefinition metadata XML file in your DX project that you want to convert to a test spec YAML file.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "force-overwrite": {
          "name": "force-overwrite",
          "summary": "Don't prompt for confirmation when overwriting an existing test spec YAML file.",
          "allowNo": false,
          "type": "boolean"
        },
        "output-file": {
          "char": "f",
          "name": "output-file",
          "summary": "Name of the generated test spec YAML file. Default value is \"specs/<AGENT_API_NAME>-testSpec.yaml\".",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": false,
      "hiddenAliases": [],
      "id": "agent:generate:test-spec",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Generate an agent test spec, which is a YAML file that lists the test cases for testing a specific agent.",
      "enableJsonFlag": false,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "generate",
        "test-spec.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:generate:test-spec",
        "generate:agent:test-spec",
        "generate:test-spec:agent",
        "agent:test-spec:generate",
        "test-spec:agent:generate",
        "test-spec:generate:agent"
      ]
    },
    "agent:test:cancel": {
      "aliases": [],
      "args": {},
      "description": "This command requires a job ID, which the original \"agent test run\" command displays when it completes. You can also use the --use-most-recent flag to see results for the most recently run agent test.",
      "examples": [
        "Cancel an agent test currently running in your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 4KBfake0000003F4AQ",
        "Cancel the most recently run agent test in the org with alias \"my-org\":\n<%= config.bin %> <%= command.id %> --job-id 4KBfake0000003F4AQ --target-org my-org"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "job-id": {
          "char": "i",
          "name": "job-id",
          "summary": "Job ID of the running agent test that you want to cancel.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "use-most-recent": {
          "char": "r",
          "name": "use-most-recent",
          "summary": "Use the job ID of the most recently-run agent test.",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": true,
      "hidden": true,
      "hiddenAliases": [],
      "id": "agent:test:cancel",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "state": "beta",
      "strict": true,
      "summary": "Cancel an agent test that's currently running in your org.",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "test",
        "cancel.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:test:cancel",
        "test:agent:cancel",
        "test:cancel:agent",
        "agent:cancel:test",
        "cancel:agent:test",
        "cancel:test:agent"
      ]
    },
    "agent:test:create": {
      "aliases": [],
      "args": {},
      "description": "To run this command, you must have an agent test spec file, which is a YAML file that lists the test cases for testing a specific agent. Use the \"agent generate test-spec\" CLI command to generate a test spec file. Then specify the file to this command with the --spec flag, or run this command with no flags to be prompted.\n\nWhen this command completes, your org contains the new agent test, which you can view and edit using the Testing Center UI. This command also retrieves the metadata component (AiEvaluationDefinition) associated with the new test to your local Salesforce DX project and displays its filename.\n\nAfter you've created the test in the org, use the \"agent test run\" command to run it.",
      "examples": [
        "Create an agent test interactively and be prompted for the test spec and API name of the test in the org; use the default org:\n<%= config.bin %> <%= command.id %>",
        "Create an agent test and use flags to specify all required information; if a test with same API name already exists in the org, overwrite it without confirmation. Use the org with alias \"my-org\":\n<%= config.bin %> <%= command.id %> --spec specs/Resort_Manager-testSpec.yaml --api-name Resort_Manager_Test --force-overwrite --target-org my-org",
        "Preview what the agent test metadata (AiEvaluationDefinition) looks like without deploying it to your default org:\n<%= config.bin %> <%= command.id %> --spec specs/Resort_Manager-testSpec.yaml --api-name Resort_Manager_Test --preview"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "api-name": {
          "name": "api-name",
          "summary": "API name of the new test; the API name must not exist in the org.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "spec": {
          "name": "spec",
          "summary": "Path to the test spec YAML file.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "preview": {
          "name": "preview",
          "summary": "Preview the test metadata file (AiEvaluationDefinition) without deploying to your org.",
          "allowNo": false,
          "type": "boolean"
        },
        "force-overwrite": {
          "name": "force-overwrite",
          "summary": "Don't prompt for confirmation when overwriting an existing test (based on API name) in your org.",
          "allowNo": false,
          "type": "boolean"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:test:create",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Create an agent test in your org using a local test spec YAML file.",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "test",
        "create.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:test:create",
        "test:agent:create",
        "test:create:agent",
        "agent:create:test",
        "create:agent:test",
        "create:test:agent"
      ]
    },
    "agent:test:list": {
      "aliases": [],
      "args": {},
      "description": "The command outputs a table with the name (API name) of each test along with its unique ID and the date it was created in the org.",
      "examples": [
        "List the agent tests in your default org:\n<%= config.bin %> <%= command.id %>",
        "List the agent tests in an org with alias \"my-org\"\"\n<%= config.bin %> <%= command.id %> --target-org my-org"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:test:list",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "List the available agent tests in your org.",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "test",
        "list.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:test:list",
        "test:agent:list",
        "test:list:agent",
        "agent:list:test",
        "list:agent:test",
        "list:test:agent"
      ]
    },
    "agent:test:results": {
      "aliases": [],
      "args": {},
      "description": "This command requires a job ID, which the original \"agent test run\" command displays when it completes. You can also use the --use-most-recent flag to see results for the most recently run agent test.\n\nBy default, this command outputs test results in human-readable tables for each test case. The tables show whether the test case passed, the expected and actual values, the test score, how long the test took, and more. Use the --result-format to display the test results in JSON or Junit format. Use the --output-dir flag to write the results to a file rather than to the terminal.",
      "examples": [
        "Get the results of an agent test run in your default org using its job ID:\n<%= config.bin %> <%= command.id %> --job-id 4KBfake0000003F4AQ",
        "Get the results of the most recently run agent test in an org with alias \"my-org\":\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-org",
        "Get the results of the most recently run agent test in your default org, and write the JSON-formatted results into a directory called \"test-results\":\n<%= config.bin %> <%= command.id %> --use-most-recent --output-dir ./test-results --result-format json"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "job-id": {
          "char": "i",
          "name": "job-id",
          "required": true,
          "summary": "Job ID of the completed agent test run.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "result-format": {
          "name": "result-format",
          "summary": "Format of the agent test run results.",
          "default": "human",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "json",
            "human",
            "junit",
            "tap"
          ],
          "type": "option"
        },
        "output-dir": {
          "char": "d",
          "description": "If the agent test run completes, write the results to the specified directory. If the test is still running, the test results aren't written.",
          "name": "output-dir",
          "summary": "Directory to write the agent test results into.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:test:results",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Get the results of a completed agent test run.",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "test",
        "results.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:test:results",
        "test:agent:results",
        "test:results:agent",
        "agent:results:test",
        "results:agent:test",
        "results:test:agent"
      ]
    },
    "agent:test:resume": {
      "aliases": [],
      "args": {},
      "description": "This command requires a job ID, which the original \"agent test run\" command displays when it completes. You can also use the --use-most-recent flag to see results for the most recently run agent test.\n\nUse the --wait flag to specify the number of minutes for this command to wait for the agent test to complete; if the test completes by the end of the wait time, the command displays the test results. If not, the CLI returns control of the terminal to you, and you must run \"agent test resume\" again.\n\nBy default, this command outputs test results in human-readable tables for each test case. The tables show whether the test case passed, the expected and actual values, the test score, how long the test took, and more. Use the --result-format to display the test results in JSON or Junit format. Use the --output-dir flag to write the results to a file rather than to the terminal.",
      "examples": [
        "Resume an agent test in your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 4KBfake0000003F4AQ",
        "Resume the most recently-run agent test in an org with alias \"my-org\" org; wait 10 minutes for the tests to finish:\n<%= config.bin %> <%= command.id %> --use-most-recent --wait 10 --target-org my-org",
        "Resume the most recent agent test in your default org, and write the JSON-formatted results into a directory called \"test-results\":\n<%= config.bin %> <%= command.id %> --use-most-recent --output-dir ./test-results --result-format json"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "job-id": {
          "char": "i",
          "name": "job-id",
          "summary": "Job ID of the original agent test run.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "use-most-recent": {
          "char": "r",
          "name": "use-most-recent",
          "summary": "Use the job ID of the most recent agent test run.",
          "allowNo": false,
          "type": "boolean"
        },
        "wait": {
          "char": "w",
          "name": "wait",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "default": "5 minutes",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "result-format": {
          "name": "result-format",
          "summary": "Format of the agent test run results.",
          "default": "human",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "json",
            "human",
            "junit",
            "tap"
          ],
          "type": "option"
        },
        "output-dir": {
          "char": "d",
          "description": "If the agent test run completes, write the results to the specified directory. If the test is still running, the test results aren't written.",
          "name": "output-dir",
          "summary": "Directory to write the agent test results into.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:test:resume",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Resume an agent test that you previously started in your org so you can view the test results.",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "test",
        "resume.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:test:resume",
        "test:agent:resume",
        "test:resume:agent",
        "agent:resume:test",
        "resume:agent:test",
        "resume:test:agent"
      ]
    },
    "agent:test:run": {
      "aliases": [],
      "args": {},
      "description": "Use the --api-name flag to specify the name of the agent test you want to run. Use the output of the \"agent test list\" command to get the names of all the available agent tests in your org.\n\nBy default, this command starts the agent test in your org, but it doesn't wait for the test to finish. Instead, it displays the \"agent test resume\" command, with a job ID, that you execute to see the results of the test run, and then returns control of the terminal window to you. Use the --wait flag to specify the number of minutes for the command to wait for the agent test to complete; if the test completes by the end of the wait time, the command displays the test results. If not, run \"agent test resume\".\n\nBy default, this command outputs test results in human-readable tables for each test case, if the test completes in time. The tables show whether the test case passed, the expected and actual values, the test score, how long the test took, and more. Use the --result-format to display the test results in JSON or Junit format. Use the --output-dir flag to write the results to a file rather than to the terminal.",
      "examples": [
        "Start an agent test called Resort_Manager_Test for an agent in your default org, don't wait for the test to finish:\n<%= config.bin %> <%= command.id %> --api-name Resort_Manager_Test",
        "Start an agent test for an agent in an org with alias \"my-org\" and wait for 10 minutes for the test to finish:\n<%= config.bin %> <%= command.id %> --api-name Resort_Manager_Test --wait 10 --target-org my-org",
        "Start an agent test and write the JSON-formatted results into a directory called \"test-results\":\n<%= config.bin %> <%= command.id %> --api-name Resort_Manager_Test --wait 10 --output-dir ./test-results --result-format json"
      ],
      "flags": {
        "json": {
          "description": "Format output as json.",
          "helpGroup": "GLOBAL",
          "name": "json",
          "allowNo": false,
          "type": "boolean"
        },
        "flags-dir": {
          "helpGroup": "GLOBAL",
          "name": "flags-dir",
          "summary": "Import flag values from a directory.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "target-org": {
          "char": "o",
          "name": "target-org",
          "noCacheDefault": true,
          "required": true,
          "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "api-version": {
          "description": "Override the api version used for api requests made by this command",
          "name": "api-version",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "api-name": {
          "char": "n",
          "name": "api-name",
          "summary": "API name of the agent test to run; corresponds to the name of the AiEvaluationDefinition metadata component that implements the agent test.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        },
        "wait": {
          "char": "w",
          "name": "wait",
          "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
          "hasDynamicHelp": true,
          "multiple": false,
          "type": "option"
        },
        "result-format": {
          "name": "result-format",
          "summary": "Format of the agent test run results.",
          "default": "human",
          "hasDynamicHelp": false,
          "multiple": false,
          "options": [
            "json",
            "human",
            "junit",
            "tap"
          ],
          "type": "option"
        },
        "output-dir": {
          "char": "d",
          "description": "If the agent test run completes, write the results to the specified directory. If the test is still running, the test results aren't written.",
          "name": "output-dir",
          "summary": "Directory to write the agent test results into.",
          "hasDynamicHelp": false,
          "multiple": false,
          "type": "option"
        }
      },
      "hasDynamicHelp": true,
      "hiddenAliases": [],
      "id": "agent:test:run",
      "pluginAlias": "@salesforce/plugin-agent",
      "pluginName": "@salesforce/plugin-agent",
      "pluginType": "core",
      "strict": true,
      "summary": "Start an agent test in your org.",
      "enableJsonFlag": true,
      "isESM": true,
      "relativePath": [
        "lib",
        "commands",
        "agent",
        "test",
        "run.js"
      ],
      "aliasPermutations": [],
      "permutations": [
        "agent:test:run",
        "test:agent:run",
        "test:run:agent",
        "agent:run:test",
        "run:agent:test",
        "run:test:agent"
      ]
    }
  },
  "version": "1.23.0"
}