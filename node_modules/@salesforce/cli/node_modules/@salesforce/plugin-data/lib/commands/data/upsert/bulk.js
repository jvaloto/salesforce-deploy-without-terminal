/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { Flags, SfCommand } from '@salesforce/sf-plugins-core';
import { baseUpsertDeleteFlags, bulkIngest, columnDelimiterFlag, lineEndingFlag } from '../../../bulkIngest.js';
import { BulkUpsertRequestCache } from '../../../bulkDataRequestCache.js';
import { transformResults } from '../../../bulkUtils.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulkv2.upsert');
export default class Upsert extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static flags = {
        ...baseUpsertDeleteFlags,
        'line-ending': lineEndingFlag,
        'column-delimiter': columnDelimiterFlag,
        'external-id': Flags.string({
            char: 'i',
            summary: messages.getMessage('flags.external-id.summary'),
            required: true,
            aliases: ['externalid'],
            deprecateAliases: true,
        }),
    };
    async run() {
        const { flags } = await this.parse(Upsert);
        const res = await bulkIngest({
            resumeCmdId: 'data upsert resume',
            stageTitle: 'Upserting data',
            object: flags.sobject,
            operation: 'upsert',
            lineEnding: flags['line-ending'],
            columnDelimiter: flags['column-delimiter'],
            externalId: flags['external-id'],
            conn: flags['target-org'].getConnection(flags['api-version']),
            cache: await BulkUpsertRequestCache.create(),
            async: flags.async,
            wait: flags.wait,
            file: flags.file,
            jsonEnabled: this.jsonEnabled(),
            logFn: (arg) => {
                this.log(arg);
            },
            warnFn: (arg) => {
                this.warn(arg);
            },
        });
        const job = flags['target-org'].getConnection(flags['api-version']).bulk2.job('ingest', {
            id: res.jobId,
        });
        if (res.failedRecords && res.failedRecords > 0) {
            process.exitCode = 1;
        }
        const jobInfo = await job.check();
        return {
            jobInfo,
            records: jobInfo.state === 'JobComplete'
                ? transformResults(await job.getAllResults())
                : {
                    successfulResults: [],
                    failedResults: [],
                    unprocessedRecords: [],
                },
        };
    }
}
//# sourceMappingURL=bulk.js.map