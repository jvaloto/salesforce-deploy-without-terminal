/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { Messages } from '@salesforce/core';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { BulkUpsertRequestCache } from '../../../bulkDataRequestCache.js';
import { transformResults } from '../../../bulkUtils.js';
import { baseUpsertDeleteResumeFlags, bulkIngestResume } from '../../../bulkIngest.js';
Messages.importMessagesDirectoryFromMetaUrl(import.meta.url);
const messages = Messages.loadMessages('@salesforce/plugin-data', 'bulk.upsert.resume');
export default class UpsertResume extends SfCommand {
    static summary = messages.getMessage('summary');
    static description = messages.getMessage('description');
    static examples = messages.getMessages('examples');
    static flags = baseUpsertDeleteResumeFlags;
    async run() {
        const [{ flags }, cache] = await Promise.all([this.parse(UpsertResume), BulkUpsertRequestCache.create()]);
        const res = await bulkIngestResume({
            cmdId: 'data upsert resume',
            stageTitle: 'Upserting data',
            cache,
            jobIdOrMostRecent: flags['job-id'] ?? flags['use-most-recent'],
            jsonEnabled: this.jsonEnabled(),
            wait: flags.wait,
            warnFn: (arg) => {
                this.warn(arg);
            },
        });
        const { options: { connection: conn }, } = await cache.resolveResumeOptionsFromCache(flags['job-id'] ?? flags['use-most-recent']);
        const job = conn.bulk2.job('ingest', {
            id: res.jobId,
        });
        return {
            jobInfo: await job.check(),
            records: transformResults(await job.getAllResults()),
        };
    }
}
//# sourceMappingURL=resume.js.map