/*
 * Copyright (c) 2024, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
import { MultiStageOutput } from '@oclif/multi-stage-output';
import terminalLink from 'terminal-link';
export class BulkIngestStages {
    mso;
    resume;
    constructor({ resume, title, baseUrl, jsonEnabled }) {
        this.resume = resume;
        this.mso = new MultiStageOutput({
            title,
            jsonEnabled,
            stages: ['Creating ingest job', 'Processing the job'],
            stageSpecificBlock: [
                {
                    stage: 'Processing the job',
                    label: 'Processed records',
                    type: 'dynamic-key-value',
                    get: (data) => {
                        if (data?.numberRecordsProcessed) {
                            return data.numberRecordsProcessed.toString();
                        }
                    },
                },
                {
                    stage: 'Processing the job',
                    label: 'Successful records',
                    type: 'dynamic-key-value',
                    get: (data) => {
                        const numberRecordsFailed = data?.numberRecordsFailed ?? 0;
                        if (data?.numberRecordsProcessed) {
                            return (data.numberRecordsProcessed - numberRecordsFailed).toString();
                        }
                    },
                },
                {
                    stage: 'Processing the job',
                    label: 'Failed records',
                    type: 'dynamic-key-value',
                    get: (data) => {
                        const numberRecordsFailed = data?.numberRecordsFailed ?? 0;
                        if (data?.numberRecordsProcessed) {
                            return numberRecordsFailed.toString();
                        }
                    },
                },
            ],
            postStagesBlock: [
                {
                    label: 'Status',
                    type: 'dynamic-key-value',
                    bold: true,
                    get: (data) => data?.state,
                },
                {
                    label: 'Job Id',
                    type: 'dynamic-key-value',
                    bold: true,
                    get: (data) => data?.id &&
                        terminalLink(data.id, `${baseUrl}/lightning/setup/AsyncApiJobStatus/page?address=${encodeURIComponent(`/${data.id}`)}`, {
                            fallback: (text, url) => `${text} (${url})`,
                        }),
                },
            ],
        });
    }
    start() {
        if (this.resume) {
            this.mso.skipTo('Processing the job');
        }
        else {
            this.mso.goto('Creating ingest job');
        }
    }
    processingJob() {
        this.mso.goto('Processing the job');
    }
    setupJobListeners(job) {
        job.on('inProgress', (res) => {
            this.mso.updateData(res);
        });
    }
    update(data) {
        this.mso.updateData(data);
    }
    stop(finalStatus) {
        this.mso.stop(finalStatus);
    }
    error() {
        this.mso.error();
    }
}
//# sourceMappingURL=bulkIngestStages.js.map