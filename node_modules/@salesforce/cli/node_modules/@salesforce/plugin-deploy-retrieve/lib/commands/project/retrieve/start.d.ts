import { MultiStageOutput } from '@oclif/multi-stage-output';
import { SfError } from '@salesforce/core';
import { RetrieveResult, RetrieveVersionData } from '@salesforce/source-deploy-retrieve';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { Duration } from '@salesforce/kit';
import { Interfaces } from '@oclif/core';
import { RetrieveResultJson } from '../../../utils/types.js';
export default class RetrieveMetadata extends SfCommand<RetrieveResultJson> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly aliases: string[];
    static readonly deprecateAliases = true;
    static readonly flags: {
        'api-version': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'ignore-conflicts': Interfaces.BooleanFlag<boolean>;
        manifest: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        metadata: Interfaces.OptionFlag<string[] | undefined, Interfaces.CustomOptions>;
        'package-name': Interfaces.OptionFlag<string[] | undefined, Interfaces.CustomOptions>;
        'output-dir': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'single-package': Interfaces.BooleanFlag<boolean>;
        'source-dir': Interfaces.OptionFlag<string[] | undefined, Interfaces.CustomOptions>;
        'target-metadata-dir': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'target-org': Interfaces.OptionFlag<import("@salesforce/core").Org, Interfaces.CustomOptions>;
        wait: Interfaces.OptionFlag<Duration, Interfaces.CustomOptions>;
        unzip: Interfaces.BooleanFlag<boolean>;
        'zip-file-name': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
    };
    static configurationVariablesSection: import("@oclif/core").HelpSection;
    static envVariablesSection: import("@oclif/core").HelpSection;
    protected retrieveResult: RetrieveResult;
    protected ms: MultiStageOutput<{
        status: string;
        apiData: RetrieveVersionData;
    }> | undefined;
    run(): Promise<RetrieveResultJson>;
    protected catch(error: Error | SfError): Promise<never>;
    private moveResultsForRetrieveTargetDir;
}
