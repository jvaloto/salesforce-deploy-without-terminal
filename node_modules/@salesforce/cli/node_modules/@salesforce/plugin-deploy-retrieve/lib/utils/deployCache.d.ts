import { TTLConfig } from '@salesforce/core';
import { JsonMap } from '@salesforce/ts-types';
import { DeployOptions, CachedOptions } from './deploy.js';
export declare class DeployCache extends TTLConfig<TTLConfig.Options, CachedOptions> {
    static getFileName(): string;
    static getDefaultOptions(): TTLConfig.Options;
    /**
     *
     * @param key jobId
     * @param value a DeployOptions object (wait is a duration, can use non-manifest options)
     * @param manifestFilePath the path to the manifest file generated by the deploy
     */
    static set(key: string, value: Partial<DeployOptions>): Promise<void>;
    static unset(key: string): Promise<void>;
    static update(key: string, obj: JsonMap): Promise<void>;
    update(key: string, obj: JsonMap): void;
    /** will return an 18 character ID if throwOnNotFound is true (because the cache can be used to shift 15 to 18) */
    resolveLatest(useMostRecent: boolean, key: string | undefined, throwOnNotFound?: boolean): string;
    /**
     * @deprecated.  Use maybeGet to handle both 15 and 18 char IDs
     * returns 18-char ID unmodified, regardless of whether it's in cache or not
     * returns 15-char ID if it matches a key in the cache, otherwise throws
     */
    resolveLongId(jobId: string): string;
    /**
     *
     * @deprecated.  Use maybeGet because the typings are wrong in sfdx-core
     */
    get(jobId: string): TTLConfig.Entry<CachedOptions>;
    /**
     * works with 18 and 15-character IDs.
     * Prefer 18 as that's how the cache is keyed.
     * Returns undefined if no match is found.
     */
    maybeGet(jobId: string): TTLConfig.Entry<CachedOptions> | undefined;
}
