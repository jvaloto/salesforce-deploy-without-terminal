import { FileResponse, MetadataApiDeployStatus, MetadataApiRetrieveStatus, RequestStatus, SourceComponent, FileResponseFailure, FileResponseSuccess, ComponentLike } from '@salesforce/source-deploy-retrieve';
import { DefaultReportOptions } from '@salesforce/apex-node';
export declare const reportsFormatters: string[];
export declare enum TestLevel {
    NoTestRun = "NoTestRun",
    RunSpecifiedTests = "RunSpecifiedTests",
    RunLocalTests = "RunLocalTests",
    RunAllTestsInOrg = "RunAllTestsInOrg"
}
export declare enum API {
    SOAP = "SOAP",
    REST = "REST"
}
export type PathInfo = {
    type: 'directory' | 'file';
    path: string;
};
export type Verbosity = 'verbose' | 'concise' | 'normal';
export type AsyncDeployResultJson = Omit<Partial<MetadataApiDeployStatus>, 'status'> & {
    status: RequestStatus | 'Queued' | 'Nothing to deploy';
    files: FileResponse[];
    zipSize?: number;
    zipFileCount?: number;
    deployUrl?: string;
};
type ConvertEntry = {
    fullName: string;
    type: string;
    filePath: string;
    state: 'Add';
};
export type ConvertMdapiJson = ConvertEntry[];
export type ConvertResultJson = {
    location: string;
};
export type DeleteSourceJson = {
    deletedSource?: FileResponse[];
    deployedSource: FileResponse[];
    outboundFiles: string[];
    deploys?: MetadataApiDeployStatus[];
    deletes?: MetadataApiDeployStatus[];
    replacements?: Record<string, string[]>;
    coverage?: CoverageResultsFileInfo;
    junit?: string;
} & MetadataApiDeployStatus;
export type CoverageResultsFileInfo = Record<keyof Partial<typeof DefaultReportOptions>, string>;
export type DeployResultJson = (MetadataApiDeployStatus & {
    files: FileResponse[];
    replacements?: Record<string, string[]>;
    zipSize?: number;
    zipFileCount?: number;
    deployUrl?: string;
}) | AsyncDeployResultJson;
export type MetadataRetrieveResultJson = Omit<MetadataApiRetrieveStatus, 'zipFile'> & {
    zipFilePath: string;
    files: FileResponse[];
};
export type RetrieveResultJson = (Omit<MetadataApiRetrieveStatus, 'zipFile'> & {
    files: FileResponse[];
}) | MetadataRetrieveResultJson;
export type Formatter<T> = {
    getJson: () => Promise<T>;
    display: () => void;
};
/** validates source component with fullname, type, and xml props */
export declare const isSourceComponent: (sc: ComponentLike) => sc is SourceComponent;
export declare const isSourceComponentWithXml: (sc: ComponentLike) => sc is SourceComponent & {
    xml: string;
};
export declare const isSdrFailure: (fileResponse: FileResponse) => fileResponse is FileResponseFailure;
export declare const isSdrSuccess: (fileResponse: FileResponse) => fileResponse is FileResponseSuccess;
export declare const isFileResponseDeleted: (fileResponse: FileResponseSuccess) => boolean;
export declare const isDefined: <T>(value?: T) => value is T;
export declare function isTruthy(value: string | undefined): boolean;
export {};
