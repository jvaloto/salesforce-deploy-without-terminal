import { Duration } from '@salesforce/kit';
import { Interfaces } from '@oclif/core';
import { SandboxCommandBase, SandboxCommandResponse } from '../../../shared/sandboxCommandBase.js';
import { SandboxLicenseType } from '../../../shared/orgTypes.js';
export default class CreateSandbox extends SandboxCommandBase<SandboxCommandResponse> {
    static summary: string;
    static description: string;
    static examples: string[];
    static readonly aliases: string[];
    static readonly deprecateAliases = true;
    static flags: {
        'definition-file': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'set-default': Interfaces.BooleanFlag<boolean>;
        alias: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        wait: Interfaces.OptionFlag<Duration, Interfaces.CustomOptions>;
        'poll-interval': Interfaces.OptionFlag<Duration, Interfaces.CustomOptions>;
        async: Interfaces.BooleanFlag<boolean>;
        name: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'source-sandbox-name': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'source-id': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'license-type': Interfaces.OptionFlag<SandboxLicenseType | undefined, Interfaces.CustomOptions>;
        'target-org': Interfaces.OptionFlag<import("@salesforce/core").Org, Interfaces.CustomOptions>;
        'no-prompt': Interfaces.BooleanFlag<boolean>;
        'no-track-source': Interfaces.BooleanFlag<boolean>;
    };
    private flags;
    run(): Promise<SandboxCommandResponse>;
    protected getCheckSandboxStatusParams(): string[];
    private createSandboxRequest;
    private createSandbox;
    private initSandboxProcessData;
    private confirmSandboxReq;
    private validateFlags;
}
