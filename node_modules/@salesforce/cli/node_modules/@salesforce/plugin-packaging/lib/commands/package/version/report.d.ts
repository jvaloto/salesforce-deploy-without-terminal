import { SfCommand } from '@salesforce/sf-plugins-core';
import { CodeCoverage, PackageType, PackageVersionReportResult, PackagingSObjects } from '@salesforce/packaging';
declare const omissions: readonly ["CodeCoverage", "HasPassedCodeCoverageCheck", "Package2", "HasMetadataRemoved"];
type Omission = (typeof omissions)[number];
export type PackageVersionReportResultModified = Omit<PackageVersionReportResult, Omission> & {
    CodeCoverage: CodeCoverage | string | undefined;
    HasPassedCodeCoverageCheck: boolean | undefined | string;
    Package2: Partial<Omit<PackagingSObjects.Package2, 'IsOrgDependent'> & {
        IsOrgDependent: string;
    }>;
    PackageType?: PackageType;
    HasMetadataRemoved: boolean | string;
};
export declare class PackageVersionReportCommand extends SfCommand<PackageVersionReportResultModified> {
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly deprecateAliases = true;
    static readonly aliases: string[];
    static readonly flags: {
        loglevel: import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        'target-dev-hub': import("@oclif/core/interfaces").OptionFlag<import("@salesforce/core").Org, import("@oclif/core/interfaces").CustomOptions>;
        'api-version': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
        package: import("@oclif/core/interfaces").OptionFlag<string, import("@oclif/core/interfaces").CustomOptions>;
        verbose: import("@oclif/core/interfaces").BooleanFlag<boolean>;
    };
    protected haveCodeCoverageData: boolean;
    run(): Promise<PackageVersionReportResultModified>;
    private display;
    private filterVerboseRecords;
    private massageResultsForDisplay;
}
export {};
