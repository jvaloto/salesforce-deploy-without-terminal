import { SfError, StructuredMessage } from '@salesforce/core';
import { AnyJson } from '@salesforce/ts-types';
type ErrorDataProperties = AnyJson;
export type SfCommandErrorOptions<T extends ErrorDataProperties = ErrorDataProperties> = {
    message: string;
    exitCode: number;
    code: string;
    name?: string;
    commandName: string;
    data?: T;
    cause?: unknown;
    context?: string;
    actions?: string[];
    result?: unknown;
    warnings?: Array<StructuredMessage | string>;
};
type SfCommandErrorJson = SfCommandErrorOptions & {
    name: string;
    status: number;
    stack?: string;
    cause?: string;
};
export declare class SfCommandError extends SfError {
    status: number;
    commandName: string;
    warnings?: Array<StructuredMessage | string>;
    result?: unknown;
    skipOclifErrorHandling: boolean;
    oclif: {
        exit: number;
    };
    /**
     * SfCommandError is meant to wrap errors from `SfCommand.catch()` for a common
     * error format to be logged, sent to telemetry, and re-thrown. Do not create
     * instances from the constructor.  Call the static method, `SfCommandError.from()`
     * and use the returned `SfCommandError`.
     */
    private constructor();
    static from(err: Error | SfError | SfCommandError, commandName: string, warnings?: Array<StructuredMessage | string>): SfCommandError;
    toJson(): SfCommandErrorJson;
    appendErrorSuggestions(): void;
}
export {};
//# sourceMappingURL=SfCommandError.d.ts.map