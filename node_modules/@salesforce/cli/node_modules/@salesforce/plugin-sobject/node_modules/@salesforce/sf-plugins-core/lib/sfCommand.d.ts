import { Errors, Command, Config, HelpSection } from '@oclif/core';
import { SfProject, SfError, ConfigAggregator, StructuredMessage } from '@salesforce/core';
import type { AnyJson } from '@salesforce/ts-types';
import { Progress } from './ux/progress.js';
import { Spinner } from './ux/spinner.js';
import { Ux } from './ux/ux.js';
import { SfCommandError } from './SfCommandError.js';
import { PromptInputs } from './ux/prompts.js';
export type SfCommandInterface = {
    configurationVariablesSection?: HelpSection;
    envVariablesSection?: HelpSection;
    errorCodes?: HelpSection;
} & Command.Class;
/**
 * A base command that provided common functionality for all sf commands.
 * Functionality includes:
 * - JSON support
 * - progress bars
 * - spinners
 * - prompts
 * - stylized output (JSON, url, objects, headers)
 * - lifecycle events
 * - configuration variables help section
 * - environment variables help section
 * - error codes help section
 *
 * All implementations of this class need to implement the run() method.
 *
 * Additionally, all implementations of this class need to provide a generic type that describes the JSON output.
 *
 * See {@link https://github.com/salesforcecli/plugin-template-sf/blob/main/src/commands/hello/world.ts example implementation}.
 *
 * @example
 *
 * ```
 * import { SfCommand } from '@salesforce/sf-plugins-core';
 * export type MyJsonOutput = { success: boolean };
 * export default class MyCommand extends SfCommand<MyJsonOutput> {
 *   public async run(): Promise<MyJsonOutput> {
 *    return { success: true };
 *  }
 * }
 * ```
 */
export declare abstract class SfCommand<T> extends Command {
    static enableJsonFlag: boolean;
    /**
     * Add a CONFIGURATION VARIABLES section to the help output.
     *
     * @example
     * ```
     * import { SfCommand, toHelpSection } from '@salesforce/sf-plugins-core';
     * import { OrgConfigProperties } from '@salesforce/core';
     * export default class MyCommand extends SfCommand {
     *   public static configurationVariablesSection = toHelpSection(
     *     'CONFIGURATION VARIABLES',
     *     OrgConfigProperties.TARGET_ORG,
     *     OrgConfigProperties.ORG_API_VERSION,
     *   );
     * }
     * ```
     */
    static configurationVariablesSection?: HelpSection;
    /**
     * Add an Environment VARIABLES section to the help output.
     *
     * @example
     * ```
     * import { SfCommand, toHelpSection } from '@salesforce/sf-plugins-core';
     * import { EnvironmentVariable } from '@salesforce/core';
     * export default class MyCommand extends SfCommand {
     *   public static envVariablesSection = toHelpSection(
     *     'ENVIRONMENT VARIABLES',
     *     EnvironmentVariable.SF_TARGET_ORG,
     *     EnvironmentVariable.SF_USE_PROGRESS_BAR,
     *   );
     * }
     * ```
     */
    static envVariablesSection?: HelpSection;
    /**
     * Add an ERROR CODES section to the help output.
     *
     * @example
     * ```
     * import { SfCommand, toHelpSection } from '@salesforce/sf-plugins-core';
     * export default class MyCommand extends SfCommand {
     *   public static errorCodes = toHelpSection(
     *     'ERROR CODES',
     *     { 0: 'Success', 1: 'Failure' },
     *   );
     * }
     * ```
     */
    static errorCodes?: HelpSection;
    static baseFlags: {
        'flags-dir': import("@oclif/core/interfaces").OptionFlag<string | undefined, import("@oclif/core/interfaces").CustomOptions>;
    };
    /**
     * Set to true if the command must be executed inside a Salesforce project directory.
     *
     * If set to true the command will throw an error if the command is executed outside of a Salesforce project directory.
     * Additionally, this.project will be set to the current Salesforce project (SfProject).
     *
     */
    static requiresProject: boolean;
    /**
     * Add a spinner to the console. {@link Spinner}
     */
    spinner: Spinner;
    /**
     * Add a progress bar to the console. {@link Progress}
     */
    progress: Progress;
    project?: SfProject;
    /**
     * ConfigAggregator instance for accessing global and local configuration.
     */
    configAggregator: ConfigAggregator;
    private warnings;
    private warningsToFlush;
    private ux;
    private lifecycle;
    constructor(argv: string[], config: Config);
    protected get statics(): typeof SfCommand;
    jsonEnabled(): boolean;
    /**
     * Log a success message that has the standard success message color applied.
     *
     * @param message The message to log.
     */
    logSuccess(message: string): void;
    /**
     * Log warning to users. If --json is enabled, then the warning will be added to the json output under the warnings property.
     *
     * @param input {@link SfCommand.Warning} The message to log.
     */
    warn(input: SfCommand.Warning): SfCommand.Warning;
    /**
     * Log info message to users.
     *
     * @param input {@link SfCommand.Info} The message to log.
     */
    info(input: SfCommand.Info): void;
    /**
     * Warn user about sensitive information (access tokens, etc...) before logging to the console.
     *
     * @param msg The message to log.
     */
    logSensitive(msg?: string): void;
    /**
     * Display a table on the console. Will automatically be suppressed when --json flag is present.
     */
    table<R extends Ux.Table.Data>(data: R[], columns: Ux.Table.Columns<R>, options?: Ux.Table.Options): void;
    /**
     * Log a stylized url to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param text The text to display for the url.
     * @param uri The url to display.
     */
    url(text: string, uri: string, params?: {}): void;
    /**
     * Log stylized JSON to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param obj The JSON to log.
     */
    styledJSON(obj: AnyJson): void;
    /**
     * Log stylized object to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param obj The object to log.
     */
    styledObject(obj: AnyJson): void;
    /**
     * Log stylized header to the console. Will automatically be suppressed when --json flag is present.
     *
     * @param text the text to display as a header.
     */
    styledHeader(text: string): void;
    logJson(json: AnyJson | unknown): void;
    /**
     * Prompt user for yes/no confirmation.
     * Avoid calling in --json scenarios and always provide a `--no-prompt` option for scripting
     *
     * @param message text to display.  Do not include a question mark.
     * @param ms milliseconds to wait for user input.  Defaults to 60s.  Will throw an error when timeout is reached.
     *
     */
    secretPrompt({ message, ms }: PromptInputs<string>): Promise<string>;
    /**
     * Prompt user for yes/no confirmation.
     * Avoid calling in --json scenarios and always provide a `--no-prompt` option for scripting
     *
     * @param message text to display.  Do not include a question mark or Y/N.
     * @param ms milliseconds to wait for user input.  Defaults to 10s.  Will use the default value when timeout is reached.
     * @param defaultAnswer boolean to set the default answer to.  Defaults to false.
     *
     */
    confirm({ message, ms, defaultAnswer }: PromptInputs<boolean>): Promise<boolean>;
    _run<R>(): Promise<R>;
    /**
     * Wrap the command result into the standardized JSON structure.
     */
    protected toSuccessJson(result: T): SfCommand.Json<T>;
    protected catch(error: Error | SfError | Errors.CLIError): Promise<never>;
    protected finally(_: Error | undefined): Promise<any>;
    abstract run(): Promise<T>;
}
export declare namespace SfCommand {
    type Info = StructuredMessage | string;
    type Warning = StructuredMessage | string;
    type Json<T> = {
        status: number;
        result: T;
        warnings?: Warning[];
    };
    type Error = SfCommandError;
}
//# sourceMappingURL=sfCommand.d.ts.map