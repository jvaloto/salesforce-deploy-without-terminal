import { SinonSandbox } from 'sinon';
import { SfCommand } from './sfCommand.js';
import { Ux } from './ux/ux.js';
/**
 * Stub methods on the Ux class.
 * Even if you plan to make no assertions, this will silence the output to keep your test results clean
 *
 * @example
 * ```
 * import { stubUx } from '@salesforce/sf-plugins-core';
 * let stubUxStubs: ReturnType<typeof stubUx>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * stubUxStubs = stubUx($$.SANDBOX);
 *
 * // inside some test
 * expect(stubUxStubs.log.args.flat()).to.deep.include(`foo`);
 * ```
 *
 */
export declare function stubUx(sandbox: SinonSandbox): {
    log: import("sinon").SinonStub<[message?: string | undefined, ...args: string[]], void>;
    warn: import("sinon").SinonStub<[message: string | Error], void>;
    table: import("sinon").SinonStub<[data: Ux.Table.Data[], columns: Ux.Table.Columns<Ux.Table.Data>, options?: import("./ux/table.js").Options | undefined], void>;
    url: import("sinon").SinonStub<[text: string, uri: string, params?: {} | undefined], void>;
    styledHeader: import("sinon").SinonStub<[text: string], void>;
    styledObject: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson, keys?: string[] | undefined], void>;
    styledJSON: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson, theme?: Record<string, string> | undefined], void>;
};
/**
 * Stub methods on the Ux class.
 * Even if you plan to make no assertions, this will silence the output to keep your test results clean
 *
 * @example
 * ```
 * import { stubSfCommandUx } from '@salesforce/sf-plugins-core';
 * let stubSfCommandUxStubs: ReturnType<typeof stubSfCommandUx>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * cmdStubs = stubSfCommandUx($$.SANDBOX);
 *
 * // inside some test
 * expect(cmdStubs.warn.args.flat()).to.deep.include(`foo`);
 * ```
 *
 */
export declare function stubSfCommandUx(sandbox: SinonSandbox): {
    log: import("sinon").SinonStub<[message?: string | undefined, ...args: any[]], void>;
    logJson: import("sinon").SinonStub<[json: unknown], void>;
    logToStderr: import("sinon").SinonStub<[message?: string | undefined, ...args: any[]], void>;
    logSuccess: import("sinon").SinonStub<[message: string], void>;
    logSensitive: import("sinon").SinonStub<[msg?: string | undefined], void>;
    info: import("sinon").SinonStub<[input: SfCommand.Info], void>;
    warn: import("sinon").SinonStub<[input: SfCommand.Warning], SfCommand.Warning>;
    table: import("sinon").SinonStub<[data: Ux.Table.Data[], columns: Ux.Table.Columns<Ux.Table.Data>, options?: import("./ux/table.js").Options | undefined], void>;
    url: import("sinon").SinonStub<[text: string, uri: string, params?: {} | undefined], void>;
    styledHeader: import("sinon").SinonStub<[text: string], void>;
    styledObject: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson], void>;
    styledJSON: import("sinon").SinonStub<[obj: import("@salesforce/ts-types").AnyJson], void>;
};
/**
 * Stub the SfCommand spinner.
 * Even if you plan to make no assertions, this will silence the output to keep your test results clean
 *
 * @example
 * ```
 * import { stubSpinner } from '@salesforce/sf-plugins-core';
 * let spinnerStubs: ReturnType<typeof stubSpinner>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * spinnerStubs = stubSpinner($$.SANDBOX);
 *
 * // inside some test
 * expect(spinnerStubs.callCount).equals(1);
 * ```
 *
 */
export declare function stubSpinner(sandbox: SinonSandbox): {
    start: import("sinon").SinonStub<[action: string, status?: string | undefined, opts?: {
        stdout?: boolean;
    } | undefined], void>;
    stop: import("sinon").SinonStub<[msg?: string | undefined], void>;
};
/**
 * Stub the SfCommand prompter.
 *
 * @example
 * ```
 * import { stubPrompter } from '@salesforce/sf-plugins-core';
 * let prompterStubs: ReturnType<typeof stubPrompter>;
 *
 * // inside your beforeEach, $$ is a SinonSandbox
 * prompterStubs = stubPrompter($$.SANDBOX);
 *
 * // inside some test
 * expect(prompterStubs.confirm.firstCall.args[0]).to.equal(
 *     messages.getMessage('confirmDelete', ['scratch', testOrg.username])
 *   );
 * ```
 *
 */
export declare function stubPrompter(sandbox: SinonSandbox): {
    secret: import("sinon").SinonStub<[import("./ux/prompts.js").PromptInputs<string>], Promise<string>>;
    confirm: import("sinon").SinonStub<[import("./ux/prompts.js").PromptInputs<boolean>], Promise<boolean>>;
};
//# sourceMappingURL=stubUx.d.ts.map