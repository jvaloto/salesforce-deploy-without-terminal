import { Org } from '@salesforce/core';
import { SfCommand } from '@salesforce/sf-plugins-core';
import { Interfaces } from '@oclif/core';
export declare class CreateUserCommand extends SfCommand<CreateUserOutput> {
    static strict: boolean;
    static readonly deprecateAliases = true;
    static readonly aliases: string[];
    static readonly summary: string;
    static readonly description: string;
    static readonly examples: string[];
    static readonly flags: {
        'set-alias': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'definition-file': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        'set-unique-username': Interfaces.BooleanFlag<boolean>;
        'target-org': Interfaces.OptionFlag<Org, Interfaces.CustomOptions>;
        'api-version': Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
        loglevel: Interfaces.OptionFlag<string | undefined, Interfaces.CustomOptions>;
    };
    private successes;
    private failures;
    private flags;
    private varargs;
    run(): Promise<CreateUserOutput>;
    private aggregateFields;
    private print;
    private setExitCode;
}
export default CreateUserCommand;
export type CreateUserOutput = {
    orgId: string;
    permissionSetAssignments: string[];
    fields: Record<string, unknown>;
};
