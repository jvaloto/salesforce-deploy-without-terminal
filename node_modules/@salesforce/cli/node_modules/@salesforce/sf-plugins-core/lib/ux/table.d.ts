import { TableOptions } from '@oclif/table';
type Column<T extends Record<string, unknown>> = {
    extended: boolean;
    header: string;
    minWidth: number;
    get(row: T): unknown;
};
type Columns<T extends Record<string, unknown>> = {
    [key: string]: Partial<Column<T>>;
};
type Options = {
    columns?: string;
    extended?: boolean;
    filter?: string;
    'no-header'?: boolean;
    'no-truncate'?: boolean;
    rowStart?: string;
    sort?: string;
    title?: string;
    printLine?(s: unknown): void;
};
/**
 * Converts inputs to previous table API to the new table API.
 *
 * Note that the following options will not be converted:
 * - 'extended'
 * - 'filter'
 * - 'sort'
 * - 'no-header'
 * - 'no-truncate'
 * - 'row-start'
 * - 'print-line'
 *
 * @deprecated Please use the new table API directly.
 */
export declare function convertToNewTableAPI<T extends Record<string, unknown>>(data: T[], columns: Columns<T>, options?: Options): TableOptions<Record<string, unknown>>;
export declare function getDefaults<T extends Record<string, unknown>>(options: TableOptions<T>): Partial<TableOptions<T>>;
export {};
//# sourceMappingURL=table.d.ts.map