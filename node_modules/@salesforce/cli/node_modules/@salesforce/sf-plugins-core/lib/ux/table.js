import { env } from '@salesforce/kit';
/**
 * Converts inputs to previous table API to the new table API.
 *
 * Note that the following options will not be converted:
 * - 'extended'
 * - 'filter'
 * - 'sort'
 * - 'no-header'
 * - 'no-truncate'
 * - 'row-start'
 * - 'print-line'
 *
 * @deprecated Please use the new table API directly.
 */
export function convertToNewTableAPI(data, columns, options) {
    const cols = Object.entries(columns).map(([key, opts]) => {
        if (opts.header)
            return { key, name: opts.header };
        return key;
    });
    const d = data.map((row) => Object.fromEntries(Object.entries(columns).map(([key, { get }]) => [key, get ? get(row) : row[key]])));
    return { data: d, title: options?.title, borderStyle: 'headers-only-with-underline', columns: cols };
}
export function getDefaults(options) {
    const borderStyles = [
        'all',
        'headers-only-with-outline',
        'headers-only-with-underline',
        'headers-only',
        'horizontal-with-outline',
        'horizontal',
        'none',
        'outline',
        'vertical-with-outline',
        'vertical',
    ];
    const defaultStyle = 'vertical-with-outline';
    const determineBorderStyle = () => {
        const envVar = env.getString('SF_TABLE_BORDER_STYLE', defaultStyle);
        if (borderStyles.includes(envVar)) {
            return envVar;
        }
        return defaultStyle;
    };
    const overflowOptions = ['wrap', 'truncate', 'truncate-middle', 'truncate-start', 'truncate-end'];
    const determineOverflow = () => {
        const envVar = env.getString('SF_TABLE_OVERFLOW');
        if (envVar && overflowOptions.includes(envVar)) {
            return envVar;
        }
        return options.overflow;
    };
    return {
        borderStyle: determineBorderStyle(),
        noStyle: env.getBoolean('SF_NO_TABLE_STYLE', false),
        headerOptions: {
            ...options.headerOptions,
            formatter: 'capitalCase',
        },
        overflow: determineOverflow(),
    };
}
//# sourceMappingURL=table.js.map