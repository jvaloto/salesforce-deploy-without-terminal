import { AnyJson } from '@salesforce/ts-types';
import { TableOptions } from '@oclif/table';
import { UxBase } from './base.js';
import { Spinner } from './spinner.js';
/**
 * UX methods for plugins. Automatically suppress console output if outputEnabled is set to false.
 *
 * @example
 * ```
 * import { SfCommand, Ux } from '@salesforce/sf-plugins-core';
 * import { AnyJson } from '@salesforce/ts-types';
 *
 * class MyCommand extends SfCommand<AnyJson> {
 *   public async run(): Promise<AnyJson> {
 *     const ux = new Ux(!this.jsonEnabled());
 *   }
 * }
 *
 * ```
 */
export declare class Ux extends UxBase {
    readonly spinner: Spinner;
    readonly outputEnabled: boolean;
    constructor({ jsonEnabled }?: {
        jsonEnabled: boolean;
    });
    /**
     * Log a message to the console. This will be automatically suppressed if output is disabled.
     *
     * @param message Message to log. Formatting is supported.
     * @param args Args to be used for formatting.
     */
    log(message?: string, ...args: string[]): void;
    /**
     * Log a message to stderr. This will be automatically suppressed if output is disabled.
     *
     * @param message Message to log. Formatting is supported.
     * @param args Args to be used for formatting.
     */
    logToStderr(message?: string, ...args: string[]): void;
    /**
     * Log a warning message to the console. This will be automatically suppressed if output is disabled.
     *
     * @param message Warning message to log.
     */
    warn(message: string | Error): void;
    /**
     * Display a table to the console. This will be automatically suppressed if output is disabled.
     *
     * @param options Table properties
     */
    table<T extends Record<string, unknown>>(options: TableOptions<T>): void;
    /**
     * Return a string rendering of a table.
     *
     * @param options Table properties
     * @returns string rendering of a table
     */
    makeTable<T extends Record<string, unknown>>(options: TableOptions<T>): string;
    /**
     * Display a url to the console. This will be automatically suppressed if output is disabled.
     *
     * @param text text to display
     * @param uri URL link
     * @param params
     */
    url(text: string, uri: string, params?: {}): void;
    /**
     * Display stylized JSON to the console. This will be automatically suppressed if output is disabled.
     *
     * @param obj JSON to display
     */
    styledJSON(obj: AnyJson, theme?: Record<string, string>): void;
    /**
     * Display stylized object to the console. This will be automatically suppressed if output is disabled.
     *
     * @param obj Object to display
     * @param keys Keys of object to display
     */
    styledObject(obj: AnyJson, keys?: string[]): void;
    /**
     * Display stylized header to the console. This will be automatically suppressed if output is disabled.
     *
     * @param text header to display
     */
    styledHeader(text: string): void;
}
//# sourceMappingURL=ux.d.ts.map