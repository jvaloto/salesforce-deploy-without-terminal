import { ComponentLike, SourceComponent } from '../resolve';
import { ComponentStatus, DeployMessage, FileResponse, MetadataApiDeployStatus } from './types';
type DeployMessageWithComponentType = DeployMessage & {
    componentType: string;
};
/**
 * Fix any issues with the deploy message returned by the api.
 * TODO: remove cases if fixes are made in the api.
 */
export declare const sanitizeDeployMessage: (message: DeployMessage) => DeployMessageWithComponentType;
export declare const createResponses: (component: SourceComponent, responseMessages: DeployMessage[]) => FileResponse[];
/**
 * Groups messages from the deploy result by component fullName and type
 */
export declare const getDeployMessages: (result: MetadataApiDeployStatus) => Map<string, DeployMessage[]>;
export declare const getState: (message: DeployMessage) => ComponentStatus;
export declare const isComponentNotFoundWarningMessage: (message: DeployMessage) => message is DeployMessage & Required<Pick<DeployMessage, "componentType" | "problem" | "problemType">>;
export declare const toKey: (component: ComponentLike) => string;
export declare const shouldConvertPaths: boolean;
export {};
