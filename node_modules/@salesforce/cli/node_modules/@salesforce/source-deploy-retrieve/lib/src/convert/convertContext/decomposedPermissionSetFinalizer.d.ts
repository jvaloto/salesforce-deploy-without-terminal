import type { PermissionSet } from '@jsforce/jsforce-node/lib/api/metadata/schema';
import { MetadataType } from '../../registry';
import { WriterFormat } from '../types';
import { ConvertTransactionFinalizer } from './transactionFinalizer';
type PermissionSetState = {
    parentToChild: Map<string, PermissionSet[]>;
};
/**
 * Merges child components that share the same related object (/objectSettings/<object name>.objectSettings) in the conversion pipeline
 * into a single file.
 *
 * Inserts unclaimed child components into the parent that belongs to the default package
 */
export declare class DecomposedPermissionSetFinalizer extends ConvertTransactionFinalizer<PermissionSetState> {
    transactionState: PermissionSetState;
    /** to support custom presets (the only way this code should get hit at all pass in the type from a transformer that has registry access */
    permissionSetType?: MetadataType;
    finalize(defaultDirectory?: string): Promise<WriterFormat[]>;
}
export {};
