import { ComponentSet } from '../../collections/componentSet';
import { SourceComponent } from '../../resolve/sourceComponent';
import { WriterFormat } from '../types';
import { ConvertTransactionFinalizer } from './transactionFinalizer';
type RecompositionStateValue = {
    /**
     * Parent component that children are rolled up into
     */
    component?: SourceComponent;
    /**
     * Children to be rolled up into the parent file
     */
    children?: ComponentSet;
};
type RecompositionState = Map<string, RecompositionStateValue>;
/**
 * Merges child components that share the same parent in the conversion pipeline into a single file.
 *
 * Handles both Decomposed and NonDecomposed strategies.
 *
 */
export declare class RecompositionFinalizer extends ConvertTransactionFinalizer<RecompositionState> {
    transactionState: RecompositionState;
    private xmlCache;
    finalize(): Promise<WriterFormat[]>;
}
export {};
